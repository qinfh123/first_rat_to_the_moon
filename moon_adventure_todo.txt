萌鼠登月（Moon Adventure）线上联机版 - 开发TODO文档

============================================================
一、整体架构设计
============================================================
1. 架构风格
   - 使用面向对象编程（OOP）进行模块化设计
   - 网络通信基于 socket 或 WebSocket 实现
   - 客户端-服务器（C/S）架构：
     * Server 负责游戏逻辑、状态管理、房间匹配
     * Client 负责界面展示、玩家交互输入、同步状态

2. 模块划分
   - 游戏核心逻辑模块（game_core/）
   - 网络通信模块（network/）
   - 玩家与房间管理模块（lobby/）
   - 游戏状态与同步模块（state/）
   - 前端交互界面（console UI 或 简单GUI，ui/）
   - 工具与配置（utils/）

============================================================
二、主要模块与功能需求
============================================================
1. 游戏核心逻辑模块（game_core/）
   - Board: 管理登月路径（卡牌堆/地图）
   - Player: 玩家类，包含手牌、位置、行动点数
   - Card: 定义不同类型的卡牌（资源、陷阱、特殊卡）
   - TurnManager: 控制回合流程（摸牌、打牌、行动）
   - RuleEngine: 核心规则判断（胜利条件、失败条件、卡牌效果）

2. 网络通信模块（network/）
   - Server:
     * 管理多个房间
     * 接收/转发玩家操作
     * 同步游戏状态
   - Client:
     * 连接服务器
     * 发送玩家指令
     * 接收服务器推送的游戏状态

3. 玩家与房间管理模块（lobby/）
   - Room:
     * 创建房间/加入房间
     * 管理房间内玩家列表
   - MatchMaker:
     * 匹配玩家，分配房间

4. 游戏状态与同步模块（state/）
   - GameState:
     * 保存整个游戏的状态（玩家位置、手牌、牌堆）
   - StateSerializer:
     * 将状态序列化/反序列化以便网络传输

5. 前端交互界面（ui/）
   - ConsoleUI:
     * 终端版界面（打印手牌、选择行动）
   - GUI（可选阶段）:
     * Tkinter 或 PyQt 实现简单图形化

6. 工具与配置（utils/）
   - Logger: 日志工具
   - Config: 统一配置参数（端口号、最大玩家数等）

============================================================
三、游戏玩法（Moon Adventure 规则简述）
============================================================
1. 游戏目标
   - 玩家作为宇航鼠，需要合作收集资源并安全返回飞船。
   - 游戏失败条件：氧气耗尽，或无法行动。

2. 基本规则
   - 玩家轮流进行回合。
   - 每回合可执行：移动、探索、使用卡牌等动作。
   - 地图由若干张卡牌组成，正面朝下，探索后翻开。
   - 资源需要搬运回飞船。
   - 陷阱卡可能导致资源丢失或额外消耗。

3. 胜利条件
   - 成功将足够资源带回飞船。

4. 失败条件
   - 所有玩家因氧气耗尽或陷阱导致失败。

============================================================
四、开发阶段TODO
============================================================
1. 阶段一：游戏核心逻辑（本地单机版）
   - [ ] 定义 Card, Player, Board 类
   - [ ] 实现回合机制（TurnManager）
   - [ ] 实现基本胜负条件（RuleEngine）
   - [ ] 本地命令行测试

2. 阶段二：网络联机框架
   - [ ] 实现 Server 与 Client 连接
   - [ ] 实现房间机制（Room, MatchMaker）
   - [ ] 支持多人加入同一房间
   - [ ] 状态同步（GameState, StateSerializer）

3. 阶段三：整合逻辑与联机
   - [ ] 客户端发送操作，服务器更新状态
   - [ ] 服务器推送状态，客户端展示
   - [ ] 多玩家轮流执行操作

4. 阶段四：用户界面
   - [ ] ConsoleUI 实现
   - [ ] GUI 版本（可选）

5. 阶段五：优化与测试
   - [ ] 压力测试（多房间/多玩家）
   - [ ] 日志与错误处理
   - [ ] 配置文件化

============================================================
五、扩展功能（可选）
============================================================
- [ ] AI 玩家（用于测试）
- [ ] 游戏录像与回放
- [ ] 聊天系统
- [ ] 排行榜与战绩记录

